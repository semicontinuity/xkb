// Extension layer for programming
// (Redirect actions are necessary only because of IntelliJ IDEA; otherwise, simple mappings work fine)

// L3
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫       ┃
// │ `   │ 1   │ 2   │ 3 # │ 4 $ │ 5 % │ 6   │ 7   │ 8   │ 9   │ 0   │ - _ │ + = ┃Backspace┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃ (     ┃  0  │  ;  │Enter│  >  │  +  │ PgUp│ Home│ Up  │ End │ Del │     │     ┃ Enter ┃
// ┃ Tab ↹ ┃  Q  │  W  │  E  │  R  │  T  │  Y  │  U  │  I  │  O  │  P  │     │     ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┲━━━━┛       ┃
// ┃        ┃Space│  =  │Space│BkSpc│  !  │ PgDn│  )  │ Spc │  {  │Enter│BkSpc┃            ┃
// ┃ L3  ⇧  ┃  A  │  S  │  D  │  F  │  G  │  H  │  J  │  K  │  L  │  ;: │ '"  ┃       Ins  ┃
// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┻━━━━━━━━━━━━┫
// ┃          ┃  1  │  ;  │Enter│  <  │  -  │     │     │     │     │     ┃                ┃
// ┃  Shift ⇧ ┃  Z  │  X  │  C  │  V  │  B  │  N  │  M  │  ,< │  .> │  /? ┃     Shift ⇧    ┃
// ┣━━━━━━━┳━━┻━━━━┳┷━━━━━┷┱────┴─────┴─────┴─────┴─────┴─────┴┲━━━━┷━━┳━━┻━━━━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃ ⇧     ┃       ┃       ┃
// ┃ Ctrl  ┃ Meta  ┃  Alt  ┃                Space              ┃ L5    ┃ Menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

// L5
// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫       ┃
// │ `   │ 1   │ 2   │ 3 # │ 4 $ │ 5 % │ 6   │ 7   │ 8   │ 9   │ 0   │ - _ │ + = ┃Backspace┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃       ┃  +  │  (  │  )  │  *  │     │ PgUp│ Home│ Up  │ End │     │     │     ┃ Enter ┃
// ┃ Tab ↹ ┃  Q  │  W  │  E  │  R  │  T  │  Y  │  U  │  I  │  O  │  P  │     │     ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃  !  │  <  │  >  │  =  │  !  │ PgDn│ Left│ Down│Right│BkSpc│ Del │     ┃ Ins  ┃
// ┃ L3  ⇧  ┃  A  │  S  │  D  │  F  │  G  │  H  │  J  │  K  │  L  │  ;: │ '"  │ \ | ┃      ┃
// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┷━━━━━┻━━━━━━┫
// ┃          ┃  -  │  [  │ ]   │  /  │     │     │  ;  │  0  │  =  │Space┃                ┃
// ┃  Shift ⇧ ┃  Z  │  X  │  C  │  V  │  B  │  N  │  M  │  ,< │  .> │  /? ┃     Shift ⇧    ┃
// ┣━━━━━━━┳━━┻━━━━┳┷━━━━━┷┱────┴─────┴─────┴─────┴─────┴─────┴┲━━━━┷━━┳━━┻━━━━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃ ⇧     ┃       ┃       ┃
// ┃ Ctrl  ┃ Meta  ┃  Alt  ┃                Space              ┃ L5    ┃ Menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

  xkb_symbols "my" {
    include "pc+us+ru:2+inet(evdev)"
    include "shift(both_capslock)"
//    include "group(alt_caps_toggle)"

    include "level3(caps_switch)"
    //key <CAPS> {
    //    type="ISO_Level3_Shift",
    //    symbols[Group1] = [ ISO_Level3_Shift ]
    //};

    include "level5(ralt_switch)"
    //key <RALT> {
    //    type[Group1]="ONE_LEVEL",
    //    symbols[Group1]= [ ISO_Level5_Shift ]
    //};
    //modifier_map Mod5 { <RALT> };


    // L3 + q => '0'; L5 + a => '+'
    key <AD01> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               q,               Q,           0, 0,   plus ],
        symbols[Group2]= [     Cyrillic_shorti,   Cyrillic_SHORTI ]
    };
    // L3 + w => ';'; L5 + w => '('
    key <AD02> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               w,               W,           semicolon, semicolon, parenleft ],
        symbols[Group2]= [     Cyrillic_tse,   Cyrillic_TSE ]
    };
    // L3 + e => Return; L5 + e => ')'
    key <AD03> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               e,               E,           Return, Return, parenright ],
        symbols[Group2]= [      Cyrillic_u,      Cyrillic_U ]
    };


    // L3 + a => ' '; L5 + a => '!'
    key <AC01> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               a,               A,     space, space,    exclam ],
        symbols[Group2]= [     Cyrillic_ef,     Cyrillic_EF]
    };
    // L3 + s => '='; L5 + s => '<'
    key <AC02> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               s,               S,     equal, equal,    less],
        symbols[Group2]= [     Cyrillic_yeru,     Cyrillic_YERU, equal, equal,    less]
    };
    // L3 + s => ' '; L5 + s => '>'
    key <AC03> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               d,               D,     space, space,    greater ],
        symbols[Group2]= [     Cyrillic_ve,     Cyrillic_VE,     space, space,    greater ]
    };
    // L3 + f => '0'  L5 + 'f' => '='
    key <AC04> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               f,               F,     0,     0,        equal],
        symbols[Group2]= [      Cyrillic_a,      Cyrillic_A]
    };


    // L3 + z => '1';  L5 + 'z' => '-'
    key <AB01> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               z,               Z,     1,     1,        minus],
        symbols[Group2]= [     Cyrillic_ya,     Cyrillic_YA]
    };
    // L3 + x => ';';  L5 + 'x' => '['
    key <AB02> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               x,               X, semicolon, semicolon,  bracketleft],
        symbols[Group2]= [    Cyrillic_che,    Cyrillic_CHE]
    };
    // L3 + c => Return;  L5 + 'c' => ']'
    key <AB03> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               c,               C, Return, Return,        bracketright],
        symbols[Group2]= [     Cyrillic_es,     Cyrillic_ES]
    };


    // L5: */
    key <AD04> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               r,               R,           greater, greater, greater],
        symbols[+Group2]= [     Cyrillic_ka,     Cyrillic_KA]
    };
    key <AB04> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               v,               V, less, less, less ],
        symbols[Group2]= [     Cyrillic_em,     Cyrillic_EM],
        actions[Group1]= [      NoAction(),      NoAction(), Redirect(key=<AB04>,mods=Control,clearmods=LevelThree) ]
    };



    // +-
    key <AD05> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               t,               T,     plus, plus, plus ],
        symbols[Group2]= [     Cyrillic_ie,     Cyrillic_IE ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE12>,mods=Shift,clearmods=LevelThree) ]
    };
    key <AB05> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               b,               B,     minus, minus, minus],
        symbols[Group2]= [      Cyrillic_i,      Cyrillic_I ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE11>,clearmods=LevelThree,LevelFive) ]
    };

    // !
    key <AC05> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               g,               G],
        symbols[Group2]= [     Cyrillic_pe,     Cyrillic_PE],
        actions[Group1]= [      NoAction(),      NoAction()]
    };




    // L3 + "/.,m" => "= 0;"
    key <AB08> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [           comma,            less,           comma, less,   0],
        symbols[Group2]= [     Cyrillic_be,     Cyrillic_BE,           comma, less]
    };
    key <AB09> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [          period,         greater,           period, greater, space],
        symbols[Group2]= [     Cyrillic_yu,     Cyrillic_YU,           period, greater]
    };
    key <AB10> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [           slash,        question,           slash, question, equal],
        symbols[Group2]= [          period,           comma,           slash, question]
    };
    key <AB07> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               m,               M,           m, M,  semicolon ],
        symbols[Group2]= [ Cyrillic_softsign, Cyrillic_SOFTSIGN]
    };


//    key <AB06> {
//        type= "EIGHT_LEVEL",
//        symbols[Group1]= [               n,               N,           n, N,           semicolon ],
//        symbols[Group2]= [     Cyrillic_te,     Cyrillic_TE],
//        actions[Group1]= [      NoAction(),      NoAction()]
//    };



//    key <AD01> {
//        type= "THREE_LEVEL",
//        symbols[Group1]= [               q,               Q,           parenleft ],
//        symbols[Group2]= [     Cyrillic_shorti,   Cyrillic_SHORTI,     parenleft ]
//    };




    key <AD07> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               u,               U,     parenright ],
        symbols[Group2]= [    Cyrillic_ghe,    Cyrillic_GHE],
        actions[Group1]= [      NoAction(),      NoAction() ]
    };
    key <AD09> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               o,               O,     braceleft ],
        symbols[Group2]= [  Cyrillic_shcha,  Cyrillic_SHCHA],
        actions[Group1]= [      NoAction(),      NoAction() ]
    };
    key <AD10> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               p,               P,      Return ],
        symbols[Group2]= [     Cyrillic_ze,     Cyrillic_ZE],
        actions[Group1]= [      NoAction(),      NoAction() ]
    };

    key <AC10> {
        type= "FOUR_LEVEL",
        symbols[Group1]= [       semicolon,           colon,      Return, Return ],
        symbols[Group2]= [    Cyrillic_zhe,    Cyrillic_ZHE,      Return, Return ],
        actions[Group1]= [      NoAction(),      NkoAction(),     Redirect(key=<RTRN>,clearmods=LevelThree) ]
    };


    // Arrows

    key <AD08> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               i,               I,     space ],
        symbols[Group2]= [    Cyrillic_sha,    Cyrillic_SHA ],
        actions[Group1]= [      NoAction(),      NoAction() ]
    };
    key <AC07> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               j,               J,     parenright, parenright, Left, Left, 0, 0 ],
        symbols[Group2]= [      Cyrillic_o,      Cyrillic_O,     parenright, parenright, Left, Left, 0, 0 ],
        actions[Group1]= [      NoAction(),      NoAction(),     NoAction(), NoAction(), Redirect(key=<LEFT>,clearmods=LevelFive) ]
    };
    key <AC08> {
        type= "EIGHT_LEVEL",
        symbols[Group1]= [               k,               K,     space, space, Down ],
        symbols[Group2]= [     Cyrillic_el,     Cyrillic_EL,     space, space, Down ],
        actions[Group1]= [      NoAction(),      NoAction(),     NoAction(), NoAction(), Redirect(key=<DOWN>,clearmods=LevelThree) ]
    };
    key <AC09> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               l,               L,     braceleft, braceleft, Right ],
        symbols[Group2]= [     Cyrillic_de,     Cyrillic_DE,     braceleft, braceleft, Right ],
        actions[Group1]= [      NoAction(),      NoAction(),     NoAction(), NoAction(), Redirect(key=<RGHT>,clearmods=LevelThree) ]
    };

    // Paging
    key <AD06> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               y,               Y,     Prior ],
        symbols[Group2]= [      Cyrillic_en,     Cyrillic_EN,    Prior ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<PGUP>,clearmods=LevelThree) ]
    };
    key <AC06> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               h,               H,     Next ],
        symbols[Group2]= [     Cyrillic_er,     Cyrillic_ER,     Next ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<PGDN>,clearmods=LevelThree) ]
    };

    // Enter, Ins, Del, Backspace


    // L3 + Tab = (
    key <TAB> {
        type= "THREE_LEVEL",
        symbols[Group1]= [             Tab,        ISO_Left_Tab, parenleft],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE09>,clearmods=LevelThree,mods=Shift) ]
    };


//    key <TAB> {
//        type= "THREE_LEVEL",
//        symbols[Group1]= [           Tab,      ISO_Left_Tab,     Return ],
//        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<RTRN>,clearmods=LevelThree) ]
//    };

    // L3 + ' = }
    key <AC11> {
        type= "THREE_LEVEL",
        symbols[Group1]= [       apostrophe,      quotedbl,      braceright ],
        symbols[Group2]= [        Cyrillic_e,    Cyrillic_E,     braceright ]
//,
//        actions[Group1]= [      NoAction(),      NoAction(),     NoAction(), Redirect(key=<INS>,clearmods=LevelThree) ]
    };

//    key <AC11> {
//        type= "EIGHT_LEVEL",
//        symbols[Group1]= [       apostrophe,      quotedbl,      exclam, Return, BackSpace ],
//        symbols[Group2]= [        Cyrillic_e,    Cyrillic_E,     exclam, Return, BackSpace ],
//        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<RTRN>,clearmods=LevelThree), NoAction(), Redirect(key=<BKSP>,clearmods=LevelFive) ]
//    };
    key <RTRN> {
        type= "THREE_LEVEL",
        symbols[Group1]= [       Return,             Return,      Insert ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<INS>,clearmods=LevelThree) ]
    };


  };

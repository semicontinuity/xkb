// Extension layer for programming
// Usage: CAPS+key
//
// To activate, run:
//
// xkbcomp <file> :0
//
// (Redirect actions are necessary only because of IntelliJ IDEA; otherwise, simple mappings work fine)

xkb_keymap {
  xkb_keycodes  { include "evdev+aliases(qwerty)" };
  xkb_types     { include "complete" };
  xkb_compat    { include "complete" };
  xkb_geometry  { include "pc(pc104)" };


// ┌─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┬─────┲━━━━━━━━━┓
// │     │     │     │     │     │     │     │     │     │     │     │     │     ┃ ⌫       ┃
// │ `   │ 1   │ 2   │ 3 # │ 4 $ │ 5 % │ 6   │ 7   │ 8   │ 9   │ 0   │ - _ │ + = ┃Backspace┃
// ┢━━━━━┷━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┺━┳━━━━━━━┫
// ┃ Enter ┃  (  │  )  │  <  │  >  │  -  │ PgUp│ Home│ Up  │ End │ Del │     │     ┃ Enter ┃
// ┃ Tab ↹ ┃  Q  │  W  │  E  │  R  │  T  │  Y  │  U  │  I  │  O  │  P  │     │     ┃   ⏎   ┃
// ┣━━━━━━━┻┱────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┴┬────┺┓      ┃
// ┃        ┃ ^A  │  1  │  0  │  =  │  +  │ PgDn│ Left│ Down│Right│BkSpc│ Ins │     ┃      ┃
// ┃ AltGr⇬ ┃  A  │  S  │  D  │  F  │  G  │  H  │  J  │  K  │  L  │  ;: │ '"  │ \ | ┃      ┃
// ┣━━━━━━━━┻━┱───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┬───┴─┲━━━┷━━━━━┻━━━━━━┫
// ┃          ┃ ^Z  │ ^X  │ ^C  │ ^V  │  *  │  !  │  {  │  }  │  [  │  ]  ┃                ┃
// ┃  Shift ⇧ ┃  Z  │  X  │  C  │  V  │  B  │  N  │  M  │  ,< │  .> │  /? ┃     Shift ⇧    ┃
// ┣━━━━━━━┳━━┻━━━━┳┷━━━━━┷┱────┴─────┴─────┴─────┴─────┴─────┴┲━━━━┷━━┳━━┻━━━━┳━━━━━━━┳━━━┛
// ┃       ┃       ┃       ┃                                   ┃       ┃       ┃       ┃
// ┃ Ctrl  ┃ Meta  ┃  Alt  ┃                Space              ┃AltGr ⇮┃ Menu  ┃ Ctrl  ┃
// ┗━━━━━━━┻━━━━━━━┻━━━━━━━┹───────────────────────────────────┺━━━━━━━┻━━━━━━━┻━━━━━━━┛

  xkb_symbols "my" {
    include "pc+us+ru:2+inet(evdev)"
    include "shift(both_capslock)"
    include "group(alt_caps_toggle)"

    key <CAPS> {
        type="ISO_Level3_Shift",
        symbols[Group1] = [ ISO_Level3_Shift, ISO_Next_Group ]
    };

    key <RALT> {
        type[Group1]="ONE_LEVEL",
        symbols[Group1]= [ ISO_Level3_Shift ]
    };
    modifier_map Mod3 { <RALT> };


    // Ctrl+C, etc
    key <AC01> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               a,               A, a ],
        symbols[Group2]= [     Cyrillic_ef,     Cyrillic_EF, Cyrillic_ef ],
        actions[Group1]= [      NoAction(),      NoAction(), Redirect(key=<AC01>,mods=Control,clearmods=LevelThree) ]
    };
    key <AB01> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               z,               Z, z ],
        symbols[Group2]= [     Cyrillic_ya,     Cyrillic_YA, Cyrillic_ya ],
        actions[Group1]= [      NoAction(),      NoAction(), Redirect(key=<AB01>,mods=Control,clearmods=LevelThree) ]
    };
    key <AB02> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               x,               X, x ],
        symbols[Group2]= [    Cyrillic_che,    Cyrillic_CHE, Cyrillic_che ],
        actions[Group1]= [      NoAction(),      NoAction(), Redirect(key=<AB02>,mods=Control,clearmods=LevelThree) ]
    };
    key <AB03> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               c,               C, c ],
        symbols[Group2]= [     Cyrillic_es,     Cyrillic_ES, Cyrillic_es ],
        actions[Group1]= [      NoAction(),      NoAction(), Redirect(key=<AB03>,mods=Control,clearmods=LevelThree) ]
    };
    key <AB04> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               v,               V, v ],
        symbols[Group2]= [     Cyrillic_em,     Cyrillic_EM, Cyrillic_em ],
        actions[Group1]= [      NoAction(),      NoAction(), Redirect(key=<AB04>,mods=Control,clearmods=LevelThree) ]
    };

    // parens, braces, brackets..

    key <AD01> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               q,               Q,           parenleft ],
        symbols[Group2]= [     Cyrillic_shorti,   Cyrillic_SHORTI,     parenleft ]
    };
    key <AD02> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               w,               W,           parenright ],
        symbols[Group2]= [     Cyrillic_tse,   Cyrillic_TSE,           parenright ]
    };

    key <AB07> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               m,               M,           braceleft ],
        symbols[Group2]= [ Cyrillic_softsign, Cyrillic_SOFTSIGN,       braceleft ]
    };
    key <AB08> {
        type= "THREE_LEVEL",
        symbols[Group1]= [           comma,            less,           braceright ],
        symbols[Group2]= [     Cyrillic_be,     Cyrillic_BE,           braceright ]
    };

    key <AB09> {
        type= "THREE_LEVEL",
        symbols[Group1]= [          period,         greater,           bracketleft ],
        symbols[Group2]= [     Cyrillic_yu,     Cyrillic_YU,           bracketleft ]
    };
    key <AB10> {
        type= "THREE_LEVEL",
        symbols[Group1]= [           slash,        question,           bracketright],
        symbols[Group2]= [          period,           comma,           bracketright]
    };

    key <AD03> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               e,               E,           less ],
        symbols[Group2]= [      Cyrillic_u,      Cyrillic_U,           less ]
    };
    key <AD04> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               r,               R,           greater],
        symbols[Group2]= [     Cyrillic_ka,     Cyrillic_KA,           greater]
    };


    // Arrows

    key <AD08> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               i,               I,     Up ],
        symbols[Group2]= [    Cyrillic_sha,    Cyrillic_SHA,     Up ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<UP>,clearmods=LevelThree) ]
    };
    key <AC07> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               j,               J,     Left ],
        symbols[Group2]= [      Cyrillic_o,      Cyrillic_O,     Left ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<LEFT>,clearmods=LevelThree) ]
    };
    key <AC08> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               k,               K,     Down ],
        symbols[Group2]= [     Cyrillic_el,     Cyrillic_EL,     Down ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<DOWN>,clearmods=LevelThree) ]
    };
    key <AC09> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               l,               L,     Right ],
        symbols[Group2]= [     Cyrillic_de,     Cyrillic_DE,     Right ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<RGHT>,clearmods=LevelThree) ]
    };

    // Paging
    key <AD06> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               y,               Y,     Prior ],
        symbols[Group2]= [      Cyrillic_en,     Cyrillic_EN,    Prior ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<PGUP>,clearmods=LevelThree) ]
    };
    key <AC06> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               h,               H,     Next ],
        symbols[Group2]= [     Cyrillic_er,     Cyrillic_ER,     Next ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<PGDN>,clearmods=LevelThree) ]
    };

    key <AD07> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               u,               U,     Home ],
        symbols[Group2]= [   Cyrillic_ghe,   Cyrillic_GHE,     Home ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<HOME>,clearmods=LevelThree) ]
    };
    key <AD09> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               o,               O,     End ],
        symbols[Group2]= [      Cyrillic_shcha,      Cyrillic_SHCHA,     End ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<END>,clearmods=LevelThree) ]
    };

    // Enter, Ins, Del, Backspace
    key <TAB> {
        type= "THREE_LEVEL",
        symbols[Group1]= [           Tab,        ISO_Left_Tab,   Return ]
    };
//    key <SPCE> {
//        type= "THREE_LEVEL",
//        symbols[Group1]= [           space,           space,     Return ],
//        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<RTRN>,clearmods=LevelThree) ]
//    };
    key <AD10> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               p,               P,     Delete ],
        symbols[Group2]= [     Cyrillic_ze,     Cyrillic_ZE,     Delete ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<DELE>,clearmods=LevelThree) ]
    };
    key <AC10> {
        type= "THREE_LEVEL",
        symbols[Group1]= [       semicolon,           colon,     BackSpace ],
        symbols[Group2]= [    Cyrillic_zhe,    Cyrillic_ZHE,     BackSpace ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<BKSP>,clearmods=LevelThree) ]
    };
    key <AC11> {
        type= "THREE_LEVEL",
        symbols[Group1]= [       apostrophe,      quotedbl,      Insert ],
        symbols[Group2]= [        Cyrillic_e,    Cyrillic_E,     Insert ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<INS>,clearmods=LevelThree) ]
    };


    // Common chars: - * ! =
    key <AD05> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               t,               T,     minus ],
        symbols[Group2]= [     Cyrillic_ie,     Cyrillic_IE,     minus ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE11>,clearmods=LevelThree) ]
    };
    key <AB05> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               b,               B,     asterisk ],
        symbols[Group2]= [      Cyrillic_i,      Cyrillic_I,     asterisk ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE08>,mods=Shift,clearmods=LevelThree) ]
    };
    key <AB06> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               n,               N,     exclam ],
        symbols[Group2]= [     Cyrillic_te,     Cyrillic_TE,     exclam ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE01>,mods=Shift,clearmods=LevelThree) ]
    };
    key <AC04> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               f,               F,     equal ],
        symbols[Group2]= [     Cyrillic_a,     Cyrillic_A,       equal ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE12>,clearmods=LevelThree) ]
    };
    key <AC05> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               g,               G,     plus ],
        symbols[Group2]= [     Cyrillic_pe,     Cyrillic_PE,     plus ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE12>,mods=Shift,clearmods=LevelThree) ]
    };


    // 0, 1
    key <AC02> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               s,               S,     1 ],
        symbols[Group2]= [     Cyrillic_yeru,     Cyrillic_YERU, 1 ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE01>,clearmods=LevelThree) ]
    };
    key <AC03> {
        type= "THREE_LEVEL",
        symbols[Group1]= [               d,               D,     0 ],
        symbols[Group2]= [     Cyrillic_ve,     Cyrillic_VE,     0 ],
        actions[Group1]= [      NoAction(),      NoAction(),     Redirect(key=<AE10>,clearmods=LevelThree) ]
    };

  };
};
